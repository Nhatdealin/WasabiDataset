@prefix dbo:     <http://dbpedia.org/ontology/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix foaf:    <http://xmlns.com/foaf/0.1/> .
@prefix mo:      <http://purl.org/ontology/mo/> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rml:     <http://semweb.mmlab.be/ns/rml#> .
@prefix rr:      <http://www.w3.org/ns/r2rml#> .
@prefix schema:  <http://schema.org/> .
@prefix wsb:     <http://ns.inria.fr/wasabi/ontology/> .
@prefix xrr:     <http://i3s.unice.fr/xr2rml#> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

<#Artist_Person>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.artist_without_members.find( {'type' : 'Person'} )""";
    ];
    rr:subjectMap [ 
    	rr:template "http://ns.inria.fr/wasabi/artist/{$._id}";
		rr:class wsb:Artist_Person;
    ];
    # Birth
    rr:predicateObjectMap [
        rr:predicate schema:birthDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.begin";
            rr:datatype xsd:string;
        ];  
    ];

    # Death
    rr:predicateObjectMap [
        rr:predicate schema:deathDate;
        rr:objectMap [
            xrr:reference "$.lifeSpan.end";
            rr:datatype xsd:string;
        ];  
    ].


<#Artist_Group>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.artist_without_members.find( {'type' : 'Group'} )""";
    ];
    rr:subjectMap [ 
    	rr:template "http://ns.inria.fr/wasabi/artist/{$._id}";
		rr:class wsb:Artist_Group;
    ];
  	
    # Beginning
    rr:predicateObjectMap [
        rr:predicate schema:foundingDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.begin";
            rr:datatype xsd:string;
        ];  
    ];

    # End
    rr:predicateObjectMap [
        rr:predicate schema:dissolutionDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.end";
            rr:datatype xsd:string;
        ];  
    ].

<#Choir>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.artist_without_members.find( {'type' : 'Choir'} )""";
    ];
    rr:subjectMap [ 
    	rr:template "http://ns.inria.fr/wasabi/artist/{$._id}";
		rr:class wsb:Choir;
    ];
  	
    # Beginning
    rr:predicateObjectMap [
        rr:predicate schema:foundingDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.begin";
            rr:datatype xsd:string;
        ];  
    ];

    # End
    rr:predicateObjectMap [
        rr:predicate schema:dissolutionDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.end";
            rr:datatype xsd:string;
        ];  
    ].

<#Orchestra>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.artist_without_members.find( {'type' : 'Orchestra'} )""";
    ];
    rr:subjectMap [ 
    	rr:template "http://ns.inria.fr/wasabi/artist/{$._id}";
		rr:class wsb:Orchestra;
    ];
  	
    # Beginning
    rr:predicateObjectMap [
        rr:predicate schema:foundingDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.begin";
            rr:datatype xsd:string;
        ];  
    ];

    # End
    rr:predicateObjectMap [
        rr:predicate schema:dissolutionDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.end";
            rr:datatype xsd:string;
        ];  
    ].

<#Other>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.artist_without_members.find( { $or: [{'type': 'Other'}, {'type': ''}] } )""";
    ];
    rr:subjectMap [ 
    	rr:template "http://ns.inria.fr/wasabi/artist/{$._id}";
		rr:class mo:MusicArtist;
    ];
  	
    # Beginning
    rr:predicateObjectMap [
        rr:predicate schema:foundingDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.begin";
            rr:datatype xsd:string;
        ];  
    ];

    # End
    rr:predicateObjectMap [
        rr:predicate schema:dissolutionDate;
        rr:objectMap [ 
            xrr:reference "$.lifeSpan.end";
            rr:datatype xsd:string;
        ];  
    ].


<#Artist_Common_Properties>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.artist_without_members.find( {} )""";
    ];
    rr:subjectMap [ rr:template "http://ns.inria.fr/wasabi/artist/{$._id}" ];

  	# Id Artist
    rr:predicateObjectMap [
    	rr:predicate mo:uuid ;
    	rr:objectMap [ 
            xrr:reference "$._id";
            rr:datatype xsd:string;
        ];  
    ];

    # Artist's name
    rr:predicateObjectMap [
        rr:predicate foaf:name, rdfs:label;
        rr:objectMap [
            xrr:reference "$.name";
            rr:datatype xsd:string;
            ];  
    ];

    # Artist's gender
    rr:predicateObjectMap [
        rr:predicate foaf:gender;
        rr:objectMap [ 
            xrr:reference "$.gender";
            rr:datatype xsd:string;
        ];  
    ];

    # Id Artist Deezer
    rr:predicateObjectMap [
        rr:predicate wsb:deezer_artist_id;
        rr:objectMap [ 
            xrr:reference "$.id_artist_deezer"; 
            rr:datatype xsd:string;
        ];  
    ];

    # Id Artist MusicBrainz
    rr:predicateObjectMap [
        rr:predicate mo:musicbrainz_guid;
        rr:objectMap [ 
            xrr:reference "$.id_artist_musicbrainz"; 
            rr:datatype xsd:string;
        ];  
    ];

    # Id Artist Discogs
    rr:predicateObjectMap [
        rr:predicate wsb:discogs_id;
        rr:objectMap [ 
            xrr:reference "$.id_artist_discogs";
            rr:datatype xsd:string;
        ];  
    ];

    # Artist's name without accent
    rr:predicateObjectMap [
        rr:predicate wsb:name_without_accent;
        rr:objectMap [ 
            xrr:reference "$.name_accent_fold"; 
            rr:datatype xsd:string;
        ];  
    ];

    # Disambiguation
    rr:predicateObjectMap [
        rr:predicate schema:disambiguatingDescription;
        rr:objectMap [ 
            xrr:reference "$.disambiguation"; 
            rr:datatype xsd:string;
        ];  
    ];

    # Artist's Deezer fans
    rr:predicateObjectMap [
        rr:predicate wsb:deezer_fans;
        rr:objectMap [ 
            xrr:reference "$.deezerFans"; 
            rr:datatype xsd:integer;
        ];
    ];

    # Artist's page
    rr:predicateObjectMap [
        rr:predicate mo:homepage;
        rr:objectMap [ 
            xrr:reference "$.urlOfficialWebsite"; 
            rr:termType rr:IRI;
        ];
    ];

    # Allmusic page
    rr:predicateObjectMap [
        rr:predicate wsb:allMusic_page;
        rr:objectMap [ 
            xrr:reference "$.urlAllmusic"; 
            rr:termType rr:IRI;
        ];
    ];

    # MusicBrainz page
    rr:predicateObjectMap [
        rr:predicate mo:musicbrainz;
        rr:objectMap [ 
            xrr:reference "$.urlMusicBrainz"; 
            rr:termType rr:IRI;
        ];
    ];

    # Deezer page
    rr:predicateObjectMap [
        rr:predicate wsb:deezer_page;
        rr:objectMap [ 
            xrr:reference "$.urlDeezer"; 
            rr:termType rr:IRI;
        ];
    ];

    # Abstract
    rr:predicateObjectMap [
        rr:predicate dcterms:abstract;
        rr:objectMap [ 
            xrr:reference "$.abstract"; 
            rr:datatype xsd:string;
        ];  
    ];

    # Subject
    rr:predicateObjectMap [
        rr:predicate dcterms:subject;
        rr:objectMap [ 
            xrr:reference "$.subject.*"; 
            rr:datatype xsd:string;
        ];  
    ];

    # DBPedia Abstract
    rr:predicateObjectMap [
        rr:predicate dbo:abstract;
        rr:objectMap [ 
            xrr:reference "$.dbp_abstract"; 
            rr:datatype xsd:string;
        ];  
    ];

     # Artist's picture thumbnail
    #rr:predicateObjectMap [
    #    rr:predicate schema:thumbnail;
    #    rr:objectMap [
    #        rr:template "{$.picture.small}";
    #    ];
    #];

    # Artist's picture 
    #rr:predicateObjectMap [
    #    rr:predicate schema:image;
    #    rr:objectMap [
    #        rr:template "{$.picture.xl}";
    #    ];
    #];

    # Spotify page
    rr:predicateObjectMap [
        rr:predicate wsb:spotify_page;
        rr:objectMap [ 
            xrr:reference "$.urlSpotify"; 
            rr:termType rr:IRI;
        ];
    ];

    # PureVolume page
    rr:predicateObjectMap [
        rr:predicate wsb:pureVolume_page;
        rr:objectMap [ 
            xrr:reference "$.urlPureVolume"; 
            rr:termType rr:IRI;
        ];
    ];

    # GooglePlus page
    rr:predicateObjectMap [
        rr:predicate wsb:googlePlus_page;
        rr:objectMap [ 
            xrr:reference "$.urlGooglePlus"; 
            rr:termType rr:IRI;
        ];
    ];

    # ITunes page
    rr:predicateObjectMap [
        rr:predicate wsb:iTunes_page;
        rr:objectMap [ 
            xrr:reference "$.urlITunes"; 
            rr:termType rr:IRI;
        ];
    ];

    # YouTube page
    rr:predicateObjectMap [
        rr:predicate wsb:youTube_page;
        rr:objectMap [ 
            xrr:reference "$.urlYouTube"; 
            rr:termType rr:IRI;
        ];
    ];

    # BBC page
    rr:predicateObjectMap [
        rr:predicate wsb:BBC_page;
        rr:objectMap [ 
            xrr:reference "$.urlBBC"; 
            rr:termType rr:IRI;
        ];
    ];

    # Amazon page
    rr:predicateObjectMap [
        rr:predicate wsb:amazon_page;
        rr:objectMap [ 
            xrr:reference "$.urlAmazon"; 
            rr:termType rr:IRI;
        ];
    ];

    # SecondHandSongs page
    rr:predicateObjectMap [
        rr:predicate wsb:secondHandSongs_page;
        rr:objectMap [ 
            xrr:reference "$.urlSecondHandSongs"; 
            rr:termType rr:IRI;
        ];
    ];

    # URL LastFm
    rr:predicateObjectMap [
        rr:predicate wsb:lastFm_page;
        rr:objectMap [ 
            xrr:reference "$.urlLastFm"; 
            rr:termType rr:IRI;
        ];
    ];

    # Array genres
    rr:predicateObjectMap [
        rr:predicate schema:genre;
        rr:objectMap [ 
            xrr:reference "$.genres.*";
        ];
    ];

    # Array DBPedia genres
    rr:predicateObjectMap [
        rr:predicate dbo:genre;
        rr:objectMap [ 
            xrr:reference "$.dbp_genre_uri.*";
            rr:termType rr:IRI;
        ];
    ];

    # Array associated Artists
    rr:predicateObjectMap [
        rr:predicate dbo:associatedMusicalArtist;
        rr:objectMap [ 
            xrr:reference "$.associatedMusicalArtist.*";
        ];
    ];

    # Array labels
    rr:predicateObjectMap [
        rr:predicate wsb:record_label;
        rr:objectMap [ 
            xrr:reference "$.labels.*";
        ];
    ];

    # Array name variations
    rr:predicateObjectMap [
        rr:predicate schema:alternateName;
        rr:objectMap [ 
            xrr:reference "$.nameVariations.*";
        ];
    ];

    # Wikipedia page
    rr:predicateObjectMap [
        rr:predicate mo:wikipedia;
        rr:objectMap [ 
            xrr:reference "$.urlWikipedia"; 
            rr:termType rr:IRI;
        ];
    ];

    # DBpedia equivalent resource
    rr:predicateObjectMap [
        rr:predicate owl:sameAs;
        rr:objectMap [ 
            xrr:reference "$.uriDBpedia"; 
            rr:termType rr:IRI;
        ];
    ];

    # Wikidata page
    rr:predicateObjectMap [
        rr:predicate wsb:wikidata_page;
        rr:objectMap [ 
            xrr:reference "$.urlWikidata"; 
            rr:termType rr:IRI;
        ];
    ];

    # Wikidata equivalent resource
    rr:predicateObjectMap [
        rr:predicate owl:sameAs;
        rr:objectMap [ 
            xrr:reference "$.uriWikidata"; 
            rr:termType rr:IRI;
        ];
    ];
    
    # Discogs page
    rr:predicateObjectMap [
        rr:predicate mo:discogs;
        rr:objectMap [ 
            xrr:reference "$.urlDiscogs"; 
            rr:termType rr:IRI;
        ];
    ];

    # Facebook page
    rr:predicateObjectMap [
        rr:predicate wsb:facebook_page;
        rr:objectMap [ 
            xrr:reference "$.urlFacebook"; 
            rr:termType rr:IRI;
        ];
    ];

    # MySpace page
    rr:predicateObjectMap [
        rr:predicate mo:myspace;
        rr:objectMap [ 
            xrr:reference "$.urlMySpace"; 
            rr:termType rr:IRI;
        ];
    ];

    # RateYourMusic page
    rr:predicateObjectMap [
        rr:predicate wsb:rateYourMusic_page;
        rr:objectMap [ 
            xrr:reference "$.urlRateYourMusic"; 
            rr:termType rr:IRI;
        ];
    ];

    # Twitter page
    rr:predicateObjectMap [
        rr:predicate wsb:twitter_page;
        rr:objectMap [ 
            xrr:reference "$.urlTwitter"; 
            rr:termType rr:IRI;
        ];
    ];

    # Wikia page
    rr:predicateObjectMap [
        rr:predicate wsb:wikia_page;
        rr:objectMap [ 
            xrr:reference "$.urlWikia"; 
            rr:termType rr:IRI;
        ];
    ];

    # SoundCloud page
    rr:predicateObjectMap [
        rr:predicate wsb:soundCloud_page;
        rr:objectMap [ 
            xrr:reference "$.urlSoundCloud"; 
            rr:termType rr:IRI;
        ];
    ];

    # Instagram page
    rr:predicateObjectMap [
        rr:predicate wsb:instagram_page;
        rr:objectMap [ 
            xrr:reference "$.urlInstagram"; 
            rr:termType rr:IRI;
        ];
    ];

    # Object location
    rr:predicateObjectMap [
        rr:predicate wsb:location;
        rr:objectMap [
            rr:template "{$.location.id_city_musicbrainz} {$.location.country} {$.location.city}";
            rr:termType rr:BlankNode;
        ];
    ].


<Artist_Location>
    a rr:TriplesMap;
    xrr:logicalSource [
    	# Jongo needs strings in singles quotes (difference with MongoDB shell)
        xrr:query """db.artist_without_members.find( {} )""";
    ];
    rr:subjectMap [
    	rr:template "{$.location.id_city_musicbrainz} {$.location.country} {$.location.city}";
        rr:termType rr:BlankNode;
    ];

    # Id city MusisBrainz
    rr:predicateObjectMap [
        rr:predicate wsb:musicbrainz_id;
        rr:objectMap [ 
            xrr:reference "$.location.id_city_musicbrainz";
        ];
    ];

    # Country
    rr:predicateObjectMap [
        rr:predicate wsb:country;
        rr:objectMap [ 
            xrr:reference "$.location.country";
        ];
    ];

    # City
    rr:predicateObjectMap [
        rr:predicate wsb:city;
        rr:objectMap [ 
            xrr:reference "$.location.city";
        ];
    ].
